import { useEffect, useMemo, useState } from 'react';
import { useShallow } from 'zustand/react/shallow';
import { Card } from '../Card';
import { Button } from '../Button';
import { Input } from '../Input';
import { Badge } from '../Badge';
import { useReferralStore } from '@/store/referralStore';
import { useNotification } from '@/hooks/useNotification';
import { formatNumberWithSpaces } from '@/utils/number';
import { logClientEvent } from '@/services/telemetry';

const ProgressBar = ({ value }: { value: number }) => (
  <div className="h-2 w-full rounded-full bg-token-track overflow-hidden">
    <div
      className="h-full rounded-full bg-gradient-to-r from-lime to-cyan transition-all"
      style={{ width: `${Math.min(100, Math.max(0, value))}%` }}
    />
  </div>
);

export const ReferralInviteCard: React.FC = () => {
  const { success, error: notifyError } = useNotification();
  const [codeInput, setCodeInput] = useState('');
  const [sharing, setSharing] = useState(false);

  const { referral, isLoading, isUpdating, error, loadSummary, activateCode, claimMilestone } =
    useReferralStore(
      useShallow(state => ({
        referral: state.referral,
        isLoading: state.isLoading,
        isUpdating: state.isUpdating,
        error: state.error,
        loadSummary: state.loadSummary,
        activateCode: state.activateCode,
        claimMilestone: state.claimMilestone,
      }))
    );

  useEffect(() => {
    if (!referral && !isLoading) {
      void loadSummary();
    }
  }, [referral, isLoading, loadSummary]);

  const nextMilestone = useMemo(() => {
    if (!referral) {
      return null;
    }
    return referral.milestones.find(milestone => !milestone.claimed) ?? null;
  }, [referral]);

  if (isLoading && !referral) {
    return (
      <Card className="flex flex-col gap-sm border-token-subtle bg-token-surface-secondary/60 animate-pulse">
        <div className="h-5 w-32 rounded bg-token-track" />
        <div className="h-10 w-full rounded bg-token-track" />
        <div className="h-10 w-2/3 rounded bg-token-track" />
      </Card>
    );
  }

  const activeEvents = referral?.activeEvents ?? [];

  const copyCode = async () => {
    if (!referral?.code) {
      return;
    }
    try {
      await navigator.clipboard.writeText(referral.code);
      success('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
      void logClientEvent('referral_code_copied', {});
    } catch {
      notifyError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
    }
  };

  const shareLink = async () => {
    if (!referral) {
      return;
    }
    const link = referral.shareUrl;
    const text = `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫–æ –º–Ω–µ –≤ Energy Planet! –ú–æ–π –∫–æ–¥: ${referral.code}`;
    type ShareCapableNavigator = Navigator & { share?: (data: ShareData) => Promise<void> };
    const shareCapableNavigator: ShareCapableNavigator = navigator as ShareCapableNavigator;
    const canNativeShare = typeof shareCapableNavigator.share === 'function';
    try {
      setSharing(true);
      if (canNativeShare && link) {
        await shareCapableNavigator.share({
          title: 'Energy Planet',
          text,
          url: link,
        });
      } else if (link) {
        window.open(link, '_blank', 'noopener,noreferrer');
      } else {
        await navigator.clipboard.writeText(text);
        success('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É!');
      }
      const method = canNativeShare && link ? 'navigator.share' : link ? 'open_tab' : 'copy_text';
      void logClientEvent('referral_share_click', { method });
    } catch {
      notifyError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π');
    } finally {
      setSharing(false);
    }
  };

  const handleActivate = async () => {
    try {
      await activateCode(codeInput);
      success('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
      setCodeInput('');
    } catch (err: unknown) {
      const message = err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥';
      notifyError(message);
    }
  };

  const handleClaim = async (milestoneId: string) => {
    const milestone = referral?.milestones.find(m => m.id === milestoneId);
    if (!milestone) {
      return;
    }
    try {
      await claimMilestone(milestone);
      success('–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!');
    } catch (err: unknown) {
      const message = err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É';
      notifyError(message);
    }
  };

  return (
    <div className="flex flex-col gap-md">
      <Card className="flex flex-col gap-sm bg-gradient-to-br from-indigo-500/10 to-cyan-500/10 border-indigo-400/30">
        <header className="flex items-center justify-between gap-sm">
          <div className="flex flex-col gap-1">
            <span className="text-xs uppercase tracking-wide text-token-secondary">
              –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            </span>
            <div className="flex items-center gap-sm">
              <span className="font-mono text-lg font-semibold text-token-primary">
                {referral?.code ?? '------'}
              </span>
              <Button
                size="sm"
                variant="ghost"
                onClick={copyCode}
                disabled={!referral || isLoading}
              >
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            </div>
          </div>
          <Button
            variant="primary"
            size="sm"
            onClick={shareLink}
            disabled={!referral || sharing || isLoading}
          >
            üöÄ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
          </Button>
        </header>

        <section className="flex flex-wrap items-end gap-sm">
          <div className="flex-1 min-w-[200px]">
            <label htmlFor="referral-input" className="text-xs uppercase text-token-secondary">
              –ê–∫—Ç–∏–≤–∏—Ä—É–π –∫–æ–¥ –¥—Ä—É–≥–∞
            </label>
            <Input
              id="referral-input"
              value={codeInput}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥—Ä—É–≥–∞"
              onChange={event => setCodeInput(event.target.value.toUpperCase())}
              maxLength={16}
            />
          </div>
          <Button
            variant="secondary"
            size="md"
            onClick={handleActivate}
            disabled={isUpdating || !codeInput}
          >
            ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </Button>
        </section>

        {error && (
          <p className="m-0 text-xs text-[var(--color-text-destructive)]" role="alert">
            {error}
          </p>
        )}

        <footer className="flex flex-wrap items-center justify-between gap-sm text-xs text-token-secondary">
          <span>
            –î—Ä—É–∑–µ–π:{' '}
            <strong className="text-token-primary">{referral?.totalActivations ?? 0}</strong>
          </span>
          {referral?.dailyActivations.limit ? (
            <span>
              –õ–∏–º–∏—Ç —Å–µ–≥–æ–¥–Ω—è:{' '}
              <strong className="text-token-primary">
                {referral.dailyActivations.used}/{referral.dailyActivations.limit}
              </strong>
            </span>
          ) : (
            <span>–ë–µ–∑ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞</span>
          )}
          {referral?.referredBy && (
            <span>
              –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª{' '}
              <strong className="text-token-primary">
                {referral.referredBy.username || referral.referredBy.firstName || '–¥—Ä—É–≥'}
              </strong>
            </span>
          )}
        </footer>
      </Card>

      {activeEvents.length > 0 && (
        <Card className="flex flex-col gap-sm border-amber-400/40 bg-amber-400/10 text-sm">
          <span className="text-xs uppercase tracking-wide text-amber-600 font-semibold">
            –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
          </span>
          <div className="flex flex-col gap-xs">
            {activeEvents.map(event => (
              <div
                key={event.id}
                className="flex flex-col gap-1 rounded-lg border border-amber-400/40 bg-amber-500/10 p-2"
              >
                <div className="flex items-center justify-between gap-sm">
                  <span className="font-medium text-token-primary">{event.label}</span>
                  <Badge variant="warning" size="sm">
                    –¥–æ {new Date(event.end).toLocaleDateString('ru-RU')}
                  </Badge>
                </div>
                {event.description && (
                  <span className="text-xs text-token-secondary">{event.description}</span>
                )}
                <div className="flex flex-wrap gap-sm text-xs text-amber-700">
                  {event.inviteeRewardMultiplier && event.inviteeRewardMultiplier !== 1 && (
                    <span>–ù–æ–≤–∏—á–∫–∞–º √ó{event.inviteeRewardMultiplier}</span>
                  )}
                  {event.referrerRewardMultiplier && event.referrerRewardMultiplier !== 1 && (
                    <span>–ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏–º √ó{event.referrerRewardMultiplier}</span>
                  )}
                  {event.milestoneRewardMultiplier && event.milestoneRewardMultiplier !== 1 && (
                    <span>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —ç—Ç–∞–ø—ã √ó{event.milestoneRewardMultiplier}</span>
                  )}
                </div>
              </div>
            ))}
          </div>
        </Card>
      )}

      <section className="flex flex-col gap-sm">
        <header className="flex items-center justify-between gap-sm">
          <h4 className="m-0 text-sm font-semibold text-token-primary">–≠—Ç–∞–ø—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã</h4>
          {nextMilestone && (
            <span className="text-xs text-token-secondary">
              –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —á–µ—Ä–µ–∑{' '}
              {Math.max(0, nextMilestone.threshold - (referral?.totalActivations ?? 0))} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
            </span>
          )}
        </header>

        <div className="flex flex-col gap-sm">
          {(referral?.milestones ?? []).map(milestone => (
            <Card key={milestone.id} className="flex flex-col gap-sm border-token-subtle">
              <div className="flex items-center justify-between gap-sm">
                <div className="flex flex-col gap-1">
                  <span className="text-sm font-semibold text-token-primary">
                    {milestone.title}
                  </span>
                  <span className="text-xs text-token-secondary">
                    –¶–µ–ª—å: {milestone.threshold} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                  </span>
                </div>
                {milestone.claimed ? (
                  <Badge variant="success" size="sm">
                    –ü–æ–ª—É—á–µ–Ω–æ
                  </Badge>
                ) : milestone.claimable ? (
                  <Button
                    size="sm"
                    variant="primary"
                    onClick={() => handleClaim(milestone.id)}
                    disabled={isUpdating}
                  >
                    üéÅ –ó–∞–±—Ä–∞—Ç—å
                  </Button>
                ) : null}
              </div>

              {milestone.description && (
                <p className="m-0 text-xs text-token-secondary">{milestone.description}</p>
              )}

              <ProgressBar value={milestone.progress.percentage} />
              <div className="flex items-center justify-between text-xs text-token-secondary">
                <span>
                  –ü—Ä–æ–≥—Ä–µ—Å—Å: {milestone.progress.current}/{milestone.threshold}
                </span>
                <span>
                  –ù–∞–≥—Ä–∞–¥–∞: +{formatNumberWithSpaces(milestone.reward.effectiveStars)}‚≠ê
                  {milestone.reward.multiplier !== 1 && (
                    <span className="ml-1 text-token-primary">
                      (√ó{milestone.reward.multiplier.toFixed(2)})
                    </span>
                  )}
                </span>
              </div>

              {milestone.reward.cosmeticId && (
                <span className="text-xs text-token-secondary">
                  –ö–æ—Å–º–µ—Ç–∏–∫–∞: {milestone.reward.cosmeticId}
                </span>
              )}
            </Card>
          ))}
        </div>
      </section>
    </div>
  );
};
