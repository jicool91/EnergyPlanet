/**
 * Database Migration Runner
 * –ó–∞–ø—É—Å–∫ SQL –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏ migrations/
 */

import fs from 'fs/promises';
import path from 'path';
import { Pool } from 'pg';
import config from '../config';

const migrationsDir = path.join(__dirname, '../../migrations');

// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
const pool = new Pool({
  host: config.database.host,
  port: config.database.port,
  database: config.database.name,
  user: config.database.user,
  password: config.database.password,
  ssl: config.database.ssl ? { rejectUnauthorized: false } : false,
});

/**
 * –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function createMigrationsTable(): Promise<void> {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS schema_migrations (
      id SERIAL PRIMARY KEY,
      version VARCHAR(255) UNIQUE NOT NULL,
      name VARCHAR(255) NOT NULL,
      applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ schema_migrations –≥–æ—Ç–æ–≤–∞');
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function getAppliedMigrations(): Promise<Set<string>> {
  const result = await pool.query<{ version: string }>(
    'SELECT version FROM schema_migrations ORDER BY version'
  );
  return new Set(result.rows.map((row) => row.version));
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function getMigrationFiles(): Promise<{ version: string; name: string; path: string }[]> {
  const files = await fs.readdir(migrationsDir);
  const sqlFiles = files
    .filter((file) => file.endsWith('.sql'))
    .sort();

  return sqlFiles.map((file) => {
    // –§–æ—Ä–º–∞—Ç: 001_initial_schema.sql
    const match = file.match(/^(\d{3})_(.+)\.sql$/);
    if (!match) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${file}`);
    }

    return {
      version: match[1],
      name: match[2],
      path: path.join(migrationsDir, file),
    };
  });
}

/**
 * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
 */
async function applyMigration(migration: { version: string; name: string; path: string }): Promise<void> {
  console.log(`üìù –ü—Ä–∏–º–µ–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é ${migration.version}: ${migration.name}...`);

  const sql = await fs.readFile(migration.path, 'utf-8');

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏
    await client.query(sql);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    await client.query(
      'INSERT INTO schema_migrations (version, name) VALUES ($1, $2)',
      [migration.version, migration.name]
    );

    await client.query('COMMIT');
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migration.version} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
  } catch (error) {
    await client.query('ROLLBACK');
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.version}:`, error);
    throw error;
  } finally {
    client.release();
  }
}

/**
 * –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é
 */
async function rollbackLastMigration(): Promise<void> {
  const result = await pool.query<{ version: string; name: string }>(
    'SELECT version, name FROM schema_migrations ORDER BY applied_at DESC LIMIT 1'
  );

  if (result.rows.length === 0) {
    console.log('‚ÑπÔ∏è –ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
    return;
  }

  const lastMigration = result.rows[0];
  console.log(`‚èÆÔ∏è –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ ${lastMigration.version}: ${lastMigration.name}...`);

  // –ò—â–µ–º —Ñ–∞–π–ª rollback (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const rollbackPath = path.join(migrationsDir, `${lastMigration.version}_${lastMigration.name}_rollback.sql`);

  try {
    const rollbackSql = await fs.readFile(rollbackPath, 'utf-8');

    const client = await pool.connect();
    try {
      await client.query('BEGIN');

      // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –æ—Ç–∫–∞—Ç–∞
      await client.query(rollbackSql);

      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π
      await client.query('DELETE FROM schema_migrations WHERE version = $1', [lastMigration.version]);

      await client.query('COMMIT');
      console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${lastMigration.version} –æ—Ç–∫–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      await client.query('ROLLBACK');
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:`, error);
      throw error;
    } finally {
      client.release();
    }
  } catch (error: any) {
    if (error.code === 'ENOENT') {
      console.error(`‚ùå –§–∞–π–ª –æ—Ç–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${rollbackPath}`);
      console.log('‚ÑπÔ∏è –ù—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å rollback —Ñ–∞–π–ª');
    } else {
      throw error;
    }
  }
}

/**
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function migrateUp(): Promise<void> {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

  await createMigrationsTable();

  const applied = await getAppliedMigrations();
  const migrations = await getMigrationFiles();

  const pending = migrations.filter((m) => !applied.has(m.version));

  if (pending.length === 0) {
    console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    return;
  }

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${pending.length} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π:\n`);

  for (const migration of pending) {
    await applyMigration(migration);
  }

  console.log('\n‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
}

/**
 * –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é
 */
async function migrateDown(): Promise<void> {
  console.log('‚èÆÔ∏è –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

  await rollbackLastMigration();

  console.log('\n‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function migrateStatus(): Promise<void> {
  await createMigrationsTable();

  const applied = await getAppliedMigrations();
  const migrations = await getMigrationFiles();

  console.log('\nüìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:\n');
  console.log('‚îÄ'.repeat(60));

  for (const migration of migrations) {
    const status = applied.has(migration.version) ? '‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç';
    console.log(`${migration.version} | ${status.padEnd(15)} | ${migration.name}`);
  }

  console.log('‚îÄ'.repeat(60));
  console.log(`\n–í—Å–µ–≥–æ: ${migrations.length} | –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: ${applied.size} | –û–∂–∏–¥–∞–µ—Ç: ${migrations.length - applied.size}\n`);
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const command = process.argv[2];

  try {
    switch (command) {
      case 'up':
        await migrateUp();
        break;
      case 'down':
        await migrateDown();
        break;
      case 'status':
        await migrateStatus();
        break;
      default:
        console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run migrate:up      - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  npm run migrate:down    - –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é
  npm run migrate:status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
        `);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

export { migrateUp, migrateDown, migrateStatus };

export async function closeMigrationPool(): Promise<void> {
  await pool.end();
}
