/**
 * Redis Connection and Cache Helpers
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å —Ö–µ–ª–ø–µ—Ä–∞–º–∏ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { createClient, RedisClientType } from 'redis';
import { config } from '../config';
import { logger } from '../utils/logger';

let redisClient: RedisClientType | null = null;

export async function connectRedis(): Promise<RedisClientType> {
  if (redisClient) {
    return redisClient;
  }

  if (config.redis.url) {
    redisClient = createClient({
      url: config.redis.url,
    });
  } else {
    redisClient = createClient({
      socket: {
        host: config.redis.host,
        port: config.redis.port,
        tls: config.redis.tls,
      },
      password: config.redis.password || undefined,
      database: config.redis.db,
    });
  }

  redisClient.on('error', (err) => {
    logger.error('‚ùå Redis error', err);
  });

  redisClient.on('connect', () => {
    logger.info('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
  });

  redisClient.on('ready', () => {
    logger.info('‚úÖ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  });

  await redisClient.connect();

  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  await redisClient.ping();
  logger.info('‚úÖ Redis: PING —É—Å–ø–µ—à–µ–Ω');

  return redisClient;
}

export function getRedis(): RedisClientType {
  if (!redisClient) {
    throw new Error('Redis not initialized. Call connectRedis() first.');
  }
  return redisClient;
}

export async function closeRedis(): Promise<void> {
  if (redisClient) {
    await redisClient.quit();
    redisClient = null;
    logger.info('üîå Redis: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

/**
 * –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
 */
export async function setCache(
  key: string,
  value: any,
  expirySeconds?: number
): Promise<void> {
  const client = getRedis();
  const serialized = JSON.stringify(value);

  if (expirySeconds) {
    await client.setEx(key, expirySeconds, serialized);
  } else {
    await client.set(key, serialized);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
 */
export async function getCache<T = any>(key: string): Promise<T | null> {
  const client = getRedis();
  const value = await client.get(key);

  if (!value) {
    return null;
  }

  try {
    return JSON.parse(value) as T;
  } catch (error) {
    logger.error('‚ùå Redis: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON', { key, error });
    return null;
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ –∫–µ—à–∞
 */
export async function delCache(key: string): Promise<void> {
  const client = getRedis();
  await client.del(key);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis
 */
export async function healthCheck(): Promise<boolean> {
  try {
    const client = getRedis();
    const pong = await client.ping();
    return pong === 'PONG';
  } catch (error) {
    logger.error('‚ùå Redis health check failed', error);
    return false;
  }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
 */
export async function flushCache(): Promise<void> {
  const client = getRedis();
  await client.flushDb();
  logger.warn('‚ö†Ô∏è Redis: –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω');
}
